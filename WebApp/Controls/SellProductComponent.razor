@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    <div class="form-group">
     <label for="name">Product Name</label>
            <input class="form-control" id="price" type="text" readonly value="@productToSell.Name" />
</div>
        <div class="form-group">
            <label for="price">Price</label>
            <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}",productToSell.Price))" />
        </div>
    <div class="form-group">
        <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value ="@productToSell.Quantity" class="form-control" />
    </div>
    <button type="submit"  class="btn btn-primary">Sell</button>
  </EditForm>
  @if(!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    

}

@code {
    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(SelectedProduct!=null)
        {
            productToSell = new Product
                {
                    ProductId = SelectedProduct.ProductId,
                    Name = SelectedProduct.Name,
                    CategoryId = SelectedProduct.CategoryId,
                    Quantity = 0,
                    Price = SelectedProduct.Price

                };
        }
        else
        {
            productToSell = null;

        }



    }
    private void SellProduct()
    {
        if(string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The cashier's Name is missing";
            return;
        }
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);

        if (productToSell.Quantity <= 0)
        {
            errorMessage = "The quantity has to be greater than zero.";
        }

        else if(product.Quantity >= productToSell.Quantity)
        {
            if (string.IsNullOrWhiteSpace(CashierName)) 
            throw new ApplicationException("Cashier's name is mnot given, cannot sell product");

            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName,productToSell.ProductId, productToSell.Quantity.Value);
        }
        
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left.It is not enough.";
        }

    }
    
}