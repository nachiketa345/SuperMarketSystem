@page "/editcategory/{categoryId}"


@inject NavigationManager NavigationManager
@inject IAddCategoryUseCase AddCategoryUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IEditCategoryUseCase EditCategoryUseCase
<h3>Edit Category</h3>

@if (category != null)
{
    <EditForm Model="category" OnInvalidSubmit="OnValidSumit">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="description"></label>
            <InputText id="description" @bind-Value="category.Description" class="form-control"></InputText>
        </div>
        <button type="button" class="btn btn-primary" @onclick="OnSave">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string CategoryId { get; set; }

    private Category category;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(this.CategoryId, out int icategoryId))
        {
            var cat = GetCategoryByIdUseCase.Execute(icategoryId);
            this.category = new Category { CategoryId = cat.CategoryId, Name = cat.Name, Description = cat.Description };
        }
    }

    private void OnValidSumit()
    {

        EditCategoryUseCase.Execute(this.category);
        NavigationManager.NavigateTo("/categories");

    }
    private void OnCancel()
    {
        NavigationManager.NavigateTo("/categories");
    }
    private void OnSave()
    {
        EditCategoryUseCase.Execute(this.category);
        NavigationManager.NavigateTo("/categories");
    }

}